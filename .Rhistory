above(seq_len(10), 12)
above(seq_len(10), 1)
above(seq_along(10), 1)
x <- c(NA, 1, 3, 5, 7, 9, NA, Inf)
x
seq_along(x)
seq(length(x))
seq_len(length(x))
rnorm(100)
rnorm(0)
rnorm(1)
args(lm)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
makeVector
cachemean
cachemean()
cachemean(c(10,20,30))
cachemean(makeVector())
cachemean(makeVector(c(10,20,30)))
cachemean(makeVector(c(10,20,30,40)))
?inverse
??inverse
?solve
cachemean(makeVector(c(10,20,30)))
cachemean(makeVector(c(10,20,30)))
cachemean(makeVector(c(10,20,30)))
makeVector(c(10,20,30))
makeVector(c(10,20,30))
m$get()
m <- makeVector(c(10,20,30))
m
m
m = makeVector(c(10,20,30))
m
m$get()
m$get()
m$get()
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
m$set(c(50,70,100))
m$get()
cachemean(m)
cachemean(m)
cachemean(m)
source('~/Data Science & R Programming/Course Slides/02 R Programming/week 3/assignment2/assignment2.R')
m = makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
m$get()
cacheSolve(m)
cacheSolve(m)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rnorm
?rnorm
?rpois
?distribution
library(httr)
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("github", "e9648dd2fdf5d0c6a5ab", "814e02fd433ea3239404b9d0d8a1a17767cd7c09")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("Rcpp")
library(Rcpp)
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "e9648dd2fdf5d0c6a5ab", "814e02fd433ea3239404b9d0d8a1a17767cd7c09")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[json2$name=="datasharing","created_at"]
warpbreaks
str(warpbreaks)
warpbreaks$replicate <- rep(1:9, len=54)
str(warpbreaks)
xt = xtabs(breaks ~., data=warpbreaks)
xt
?xtabs
xt = xtabs(breaks ~., data=parent.frame())
?xtabs
xt
warpbreaks
ftable(xt)
s1 <- seq(1,10,by=2)
s1
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno
yesnofac = factor(yesno, levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="yes")
asnumeric(yesnofac)
as.numeric(yesnofac)
relevel(yesnofac,ref="no")
as.numeric(yesnofac)
relevel(yesnofac,ref="no")
yesnofac
x<-relevel(yesnofac,ref="no")
as.numeric(x)
library(reshape2)
head(mtcars)
rownames(mtcars)
mtcars$carname <- rownames(mtcars)
melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
dcast(carMelt, cyl ~ variable)
str(carMelt)
dcast(carMelt, gear ~ variable)
dcast(carMelt, cyl ~ variable, mean)
?dcast
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray,sum)
tapply(InsectSprays$spray, InsectSprays$count,sum)
str(InsectSprays)
ddply()
library(plyr)
ddply()
ddply(InsectSprays)
ddply(InsectSprays,.(spray)
)
ddply(InsectSprays,.(spray), summarize)
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
?ddply
ddply(InsectSprays,.(spray), summarize, sum=ave(count,FUN=sum))
?ave
library(dplyr)
install.packages("dplyr")
library(dplyr)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 5, nrows = 190, stringsAsFactors = F, header = F)
eduData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = F)
## Merge data by country codes
matchedData <- merge(gdpData, eduData, by.x = "CountryCode", by.y = "CountryCode")
View(gdpData)
View(eduData)
View(eduData)
View(gdpData)
gdpData <- gdpData[, c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
gdpData$GDP.Value <- as.numeric(gsub(",", "", gdpData$GDP.Value))
## Merge data by country codes
matchedData <- merge(gdpData, eduData, by.x = "CountryCode", by.y = "CountryCode")
View(matchedData)
matchedData$Special.Notes
grep("Fiscal year end: June",matchedData$Special.Notes)
length(grep("Fiscal year end: June",matchedData$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
dim(sampleTimes)
length(sampleTimes)
view(sampleTimes)
sampleTimes
amzn
head(amzn)
?index
View(amzn)
table(sampleTimes)
sampleTimes
View(amzn)
date()
class(date())
Sys.Date()
year(sampleTimes)
years(sampleTimes)
months(Sys.Date())
format(Sys.Date(),"%Y")
format(sampleTimes,"%Y")
format(sampleTimes,"%Y")==2012
sum(format(sampleTimes,"%Y")==2012)
format(sampleTimes,"%m%Y")==2012
format(sampleTimes,"%m%Y")
format(sampleTimes,"%m %Y")
format(sampleTimes,"%a %Y")=="Mon 2015"
sum(format(sampleTimes,"%a %Y")=="Mon 2015")
sum(format(sampleTimes,"%a %Y")=="Mon 2012")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringAsFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country == "US")
?Comparison
filter(cran, r_version=="3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country =="US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3,size_gb=size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size-1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
play
play()
?tbl_df
nxt()
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
update(this_moment, hours=0, minutes=33)
update(this_moment, hours=00, minutes=34, seconds=0)
this_moment <- update(this_moment, hours=00, minutes=34, seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, 17, 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
source('C:/Users/REDTEA~1/AppData/Local/Temp/RtmpKwWtGO/summarize1.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(nlme)
nlme
Diet
?xyplot
weight
BodyWeight
str(BodyWeight)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
p <- g + geom_point()
print(p)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean = rep(1:3, each=4))
y<-rnorm(12, mean = rep(c(1,2,1), each=4), sd=0.2)
x<-rnorm(12, mean = rep(1:3, each=4), sd=0.2)
plot(x,y,col="blue",pch-19,cex=2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean = rep(1:3, each=4), sd=0.2)
y<-rnorm(12, mean = rep(c(1,2,1), each=4), sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
rep(1:3, each=5)
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
?plot
?pch
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
sample(1:12)
sample(1:12)
sample(1:12)
sample(1:12)
sample(1:12)
sample(1:12)
sample(1:12)
sample(1:12)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
sample(1:12)
sample(1:12)
View(dataFrame)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean = rep(1:3, each=4), sd=0.2)
y<-rnorm(12, mean = rep(c(1,2,1), each=4), sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers=3)
names(kmeansObj)
kmeansObj$cluster
par(mar=rep(0.2, 4))
plot(x, y, col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
kmeansObj2 <- kmeans(dataMatrix, centers=3)
par(mfrow=c(1,2), mar=c(2,4,0.1,0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt="n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt="n")
t(dataMatrix)[, nrow(dataMatrix):1]
t(dataMatrix)[, order(kmeansObj$cluster)]
kmeansObj$cluster
order(kmeansObj$cluster)
?order
Sys.getenv("PATH")
Sys.getenv('PATH')
system('g++ -v')
system('where make')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(RCurl)
install.packages('devtools')
install.packages("devtools")
library(curl)
install.packages(curl)
install.packages("curl")
install.packages(c("BH", "chron", "colorspace", "data.table", "dplyr", "evaluate", "formatR", "ggplot2", "highr", "httr", "knitr", "manipulate", "markdown", "plyr", "quantmod", "R6", "Rcpp", "rJava", "rmarkdown", "scales", "stringi", "stringr", "testthat", "tidyr", "TTR", "XML"))
runApp()
runApp
library(shiny)
runApp
runApp()
setwd("~/Data Science & R Programming/09 Developing Data Products/assignment")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
library('slidify')
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
